@model List<Blog>
@{
    ViewData["Title"] = "Index";
}

<input type="hidden" id="message" value="@TempData["Message"]" />
<div class="pagetitle">
    <h1>Blogs</h1>
    <nav>
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a asp-action="index" asp-controller="dashboard">Dashboard</a></li>
            <li class="breadcrumb-item active">Blogs</li>
        </ol>
        <a class="btn btn-primary" asp-action="create" asp-controller="blog">
            <i class="bx bx-plus"></i>
        </a>
    </nav>
</div><!-- End Page Title -->

<section class="section">
    <div class="row">
        <div class="col-lg-12">

            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Blogs</h5>

                    <!-- Table with stripped rows -->
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">Image</th>
                                <th scope="col">Title</th>
                                <th scope="col">Description</th>
                                <th scope="col">Created Time</th>
                                <th scope="col">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (Blog blog in Model)
                            {
                                <tr>
                                    <th scope="row">@blog.Id</th>
                                    <td>
                                        <img src="~/uploads/blogs/@blog.Image" style="width:70px;height:70px; border-radius:50%" />
                                    </td>
                                    <td>@blog.Title</td>
                                    <td>@(blog.Description.Length > 70 ? Html.Raw(blog.Description+ "..." ) : Html.Raw(blog.Description))</td>
                                    <td>@blog.CreatedAt?.ToString("dd/MM/yyyy")</td>
                                    <td>
                                        <a class="btn btn-info" asp-action="details" asp-route-id="@blog.Id">
                                            <i class="bx bx-info-circle"></i>
                                        </a>
                                        <a class="btn btn-success" asp-action="edit" asp-route-id="@blog.Id">
                                            <i class="bx bx-edit"></i>
                                        </a>
                                        <a onclick="deleteItem(@blog.Id)" class="btn btn-danger" asp-action="delete" asp-route-id="@blog.Id">
                                            <i class="bx bx-trash"></i>
                                        </a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <!-- End Table with stripped rows -->
                </div>
            </div>





        </div>

    </div>
</section>

@section CSS{
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" />
}

@section JS{
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script>
        // delete item
        function deleteItem(id) {
            event.preventDefault();
            let url = `/admin/blog/delete/${id}`;
            const swalWithBootstrapButtons = Swal.mixin({
                customClass: {
                    confirmButton: "btn btn-success",
                    cancelButton: "btn btn-danger"
                },
                buttonsStyling: false
            });
            swalWithBootstrapButtons.fire({
                title: "Are you sure?",
                text: "You won't be able to revert this!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Yes, delete it!",
                cancelButtonText: "No, cancel!",
                reverseButtons: true
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(url)
                        .then(res => res.json())
                        .then(data => {
                            if (data.status == true) {
                                swalWithBootstrapButtons.fire({
                                    title: "Deleted!",
                                    text: data.message,
                                    icon: "success"
                                });
                                setTimeout(()=>window.location.reload(),1000);
                            } else {
                                swalWithBootstrapButtons.fire({
                                    title: "Deleted!",
                                    text: data.message,
                                    icon: "error"
                                });
                            }
                        });

                } else if (
                    /* Read more about handling dismissals below */
                    result.dismiss === Swal.DismissReason.cancel
                ) {
                    swalWithBootstrapButtons.fire({
                        title: "Cancelled",
                        text: "Your furniure didn't deleted:)",
                        icon: "error"
                    });
                }
            });

        }
    </script>

    <script>
        // show toast message

        let message = $('#message').val();

        if(message != ''){
            toastr["success"](message)

            toastr.options = {
                "closeButton": true,
                "debug": false,
                "newestOnTop": false,
                "progressBar": false,
                "positionClass": "toast-top-right",
                "preventDuplicates": false,
                "onclick": null,
                "showDuration": "300",
                "hideDuration": "1000",
                "timeOut": "5000",
                "extendedTimeOut": "1000",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut"
            }
        }
    </script>
}
